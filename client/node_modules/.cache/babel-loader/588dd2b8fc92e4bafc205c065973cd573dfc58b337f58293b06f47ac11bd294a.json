{"ast":null,"code":"var _jsxFileName = \"/Volumes/data/Projects/MERN/client/src/Pages/DashBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport SensorChart from '../components/SensorChart';\nimport SensorCard from '../components/SensorCard';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DashBoard() {\n  _s();\n  const location = useLocation();\n  const [data, setdata] = useState([]);\n  const [sensorData, setSensorData] = useState([]);\n  const [selectedSensor, setSelectedSensor] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  let sensored = [];\n  sensored.push(sensorData);\n  console.log(chartData);\n  sensored.map(s => {\n    console.log(s);\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/v1/sensors/simulate');\n        setSensorData(response.data.data);\n      } catch (error) {\n        console.error('Error fetching sensor data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleCardClick = async sensorType => {\n    console.log(sensorType);\n    setSelectedSensor(sensorType);\n    try {\n      const response = await axios.get(`http://localhost:5000/api/v1/sensors/data/${sensorType}`);\n      setChartData(response.data);\n    } catch (error) {\n      console.error(`Error fetching data for ${sensorType}:`, error);\n    }\n  };\n\n  // useEffect(() => {\n  //     fetch('http://localhost:5000/api/v1/sensors/simulate')\n  //       .then(response => response.json())\n  //       .then(data => setdata(data.data))\n\n  //       .catch(error => console.error('Error fetching users:', error));\n  //   }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Current Sensor Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sensor-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleCardClick('pH'),\n          children: /*#__PURE__*/_jsxDEV(SensorCard, {\n            title: \"pH\",\n            value: sensorData.pH\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n          title: \"TSS\",\n          value: sensorData.TSS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n          title: \"TDS\",\n          value: sensorData.TDS\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n          title: \"BOD\",\n          value: sensorData.BOD\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n          title: \"COD\",\n          value: sensorData.COD\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n          title: \"Chloride\",\n          value: sensorData.Chloride\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), selectedSensor && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [selectedSensor, \" Data Over Time\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SensorChart, {\n          data: chartData,\n          label: selectedSensor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(DashBoard, \"Nr2Uwm3rC2u/Z1jis9H1kb4CD4g=\", false, function () {\n  return [useLocation];\n});\n_c = DashBoard;\nexport default DashBoard;\nvar _c;\n$RefreshReg$(_c, \"DashBoard\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","SensorChart","SensorCard","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","DashBoard","_s","location","data","setdata","sensorData","setSensorData","selectedSensor","setSelectedSensor","chartData","setChartData","sensored","push","console","log","map","s","fetchData","response","get","error","handleCardClick","sensorType","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","value","pH","TSS","TDS","BOD","COD","Chloride","label","_c","$RefreshReg$"],"sources":["/Volumes/data/Projects/MERN/client/src/Pages/DashBoard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport SensorChart from '../components/SensorChart'\nimport SensorCard from '../components/SensorCard'\nimport axios from 'axios'\n\nfunction DashBoard() {\n    const location=useLocation()\n    const [data,setdata]=useState([])\n    const [sensorData, setSensorData] = useState([]);\n    const [selectedSensor, setSelectedSensor] = useState(null);\n    const [chartData, setChartData] = useState([]);\n    let sensored=[]\n    sensored.push(sensorData)\n    console.log(chartData);\n    sensored.map((s)=>{\n        console.log(s);\n    })\n\n    useEffect(() => {\n      const fetchData = async () => {\n          try {\n              const response = await axios.get('http://localhost:5000/api/v1/sensors/simulate');\n              setSensorData(response.data.data);\n          } catch (error) {\n              console.error('Error fetching sensor data:', error);\n          }\n      };\n\n      fetchData();\n  }, []);\n\n\n  const handleCardClick = async (sensorType) => {\n    console.log(sensorType);\n    setSelectedSensor(sensorType);\n    try {\n        const response = await axios.get(`http://localhost:5000/api/v1/sensors/data/${sensorType}`);\n        setChartData(response.data);\n    } catch (error) {\n        console.error(`Error fetching data for ${sensorType}:`, error);\n    }\n};\n\n    // useEffect(() => {\n    //     fetch('http://localhost:5000/api/v1/sensors/simulate')\n    //       .then(response => response.json())\n    //       .then(data => setdata(data.data))\n            \n    //       .catch(error => console.error('Error fetching users:', error));\n    //   }, []);\n  return (\n    <>\n        {/* <div className=\"cards-container\">\n      \n        \n        <div  className=\"card\">\n          <h3>pH: {data.pH}</h3>\n          <p>TSS: {data.TSS}</p>\n          <p>TDS: {data.TDS}</p>\n          <p>BOD: {data.BOD}</p>\n          <p>COD: {data.COD}</p>\n          <p>Chloride: {data.chloride}</p>\n        </div>\n     \n    </div> */}\n    <div className=\"app\">\n            <h1>Current Sensor Data</h1>\n            <div className=\"sensor-cards\">\n                {/* {sensored.map((sensor) => (\n                    <SensorCard\n                        key={sensor.type}\n                        title={sensor.type}\n                        value={sensor.value}\n                        onClick={() => handleCardClick(sensor.type)}\n                    />\n                ))} */}\n                <div onClick={() => handleCardClick('pH')} >\n\n                <SensorCard \n                    title={\"pH\"}\n                    value={sensorData.pH}\n                    \n                />\n                </div>\n                <SensorCard \n                    title={\"TSS\"}\n                    value={sensorData.TSS}\n                />\n                <SensorCard \n                    title={\"TDS\"}\n                    value={sensorData.TDS}\n                />\n                <SensorCard \n                    title={\"BOD\"}\n                    value={sensorData.BOD}\n                />\n                <SensorCard \n                    title={\"COD\"}\n                    value={sensorData.COD}\n                />\n                <SensorCard \n                    title={\"Chloride\"}\n                    value={sensorData.Chloride}\n                />\n            </div>\n            {selectedSensor && (\n                <div className=\"chart-container\">\n                    <h2>{selectedSensor} Data Over Time</h2>\n                    <SensorChart data={chartData} label={selectedSensor} />\n                </div>\n            )}\n        </div>\n\n    </>\n  )\n}\n\nexport default DashBoard\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
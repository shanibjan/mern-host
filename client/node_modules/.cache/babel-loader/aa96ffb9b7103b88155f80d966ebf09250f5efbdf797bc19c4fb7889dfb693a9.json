{"ast":null,"code":"var _jsxFileName = \"/Volumes/data/Projects/MERN/client/src/Pages/DashBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport SensorChart from '../components/SensorChart';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimpo;\nfunction DashBoard() {\n  _s();\n  const location = useLocation();\n  const [data, setdata] = useState([]);\n  const [sensorData, setSensorData] = useState([]);\n  const [selectedSensor, setSelectedSensor] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  console.log(data);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/v1/sensors/simulate');\n        setSensorData(response.data);\n      } catch (error) {\n        console.error('Error fetching sensor data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    fetch('http://localhost:5000/api/v1/sensors/simulate').then(response => response.json()).then(data => setdata(data.data)).catch(error => console.error('Error fetching users:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"pH: \", data.pH]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"TSS: \", data.TSS]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"TDS: \", data.TDS]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"BOD: \", data.BOD]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"COD: \", data.COD]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Chloride: \", data.chloride]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(DashBoard, \"Kimun1YC3otqpCQFW8YDwGX15TQ=\", false, function () {\n  return [useLocation];\n});\n_c = DashBoard;\nexport default DashBoard;\nvar _c;\n$RefreshReg$(_c, \"DashBoard\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","SensorChart","jsxDEV","_jsxDEV","Fragment","_Fragment","impo","DashBoard","_s","location","data","setdata","sensorData","setSensorData","selectedSensor","setSelectedSensor","chartData","setChartData","console","log","fetchData","response","axios","get","error","fetch","then","json","catch","children","className","pH","fileName","_jsxFileName","lineNumber","columnNumber","TSS","TDS","BOD","COD","chloride","_c","$RefreshReg$"],"sources":["/Volumes/data/Projects/MERN/client/src/Pages/DashBoard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport SensorChart from '../components/SensorChart'\nimpo\n\nfunction DashBoard() {\n    const location=useLocation()\n    const [data,setdata]=useState([])\n    const [sensorData, setSensorData] = useState([]);\n    const [selectedSensor, setSelectedSensor] = useState(null);\n    const [chartData, setChartData] = useState([]);\n    console.log(data);\n\n    useEffect(() => {\n      const fetchData = async () => {\n          try {\n              const response = await axios.get('http://localhost:5000/api/v1/sensors/simulate');\n              setSensorData(response.data);\n          } catch (error) {\n              console.error('Error fetching sensor data:', error);\n          }\n      };\n\n      fetchData();\n  }, []);\n\n    useEffect(() => {\n        fetch('http://localhost:5000/api/v1/sensors/simulate')\n          .then(response => response.json())\n          .then(data => setdata(data.data))\n            \n          .catch(error => console.error('Error fetching users:', error));\n      }, []);\n  return (\n    <>\n        <div className=\"cards-container\">\n      \n        \n        <div  className=\"card\">\n          <h3>pH: {data.pH}</h3>\n          <p>TSS: {data.TSS}</p>\n          <p>TDS: {data.TDS}</p>\n          <p>BOD: {data.BOD}</p>\n          <p>COD: {data.COD}</p>\n          <p>Chloride: {data.chloride}</p>\n        </div>\n     \n    </div>\n\n    </>\n  )\n}\n\nexport default DashBoard\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
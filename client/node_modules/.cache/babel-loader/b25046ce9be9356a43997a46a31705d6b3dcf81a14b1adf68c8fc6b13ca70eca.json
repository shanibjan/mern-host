{"ast":null,"code":"var _jsxFileName = \"/Volumes/data/Projects/MERN/client/src/Pages/DashBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport SensorChart from '../components/SensorChart';\nimport SensorCard from '../components/SensorCard';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DashBoard() {\n  _s();\n  const location = useLocation();\n  const [data, setdata] = useState([]);\n  const [sensorData, setSensorData] = useState([]);\n  const [selectedSensor, setSelectedSensor] = useState(null);\n  const [chartData, setChartData] = useState([]);\n  console.log(sensorData);\n\n  //   useEffect(() => {\n  //     const fetchData = async () => {\n  //         try {\n  //             const response = await axios.get('http://localhost:5000/api/v1/sensors/simulate');\n  //             setSensorData(response.data);\n  //         } catch (error) {\n  //             console.error('Error fetching sensor data:', error);\n  //         }\n  //     };\n\n  //     fetchData();\n  // }, []);\n\n  const handleCardClick = async sensorType => {\n    setSelectedSensor(sensorType);\n    try {\n      const response = await axios.get(`http://localhost:5000/api/sensor-data/${sensorType}`);\n      setChartData(response.data);\n    } catch (error) {\n      console.error(`Error fetching data for ${sensorType}:`, error);\n    }\n  };\n\n  // useEffect(() => {\n  //     fetch('http://localhost:5000/api/v1/sensors/simulate')\n  //       .then(response => response.json())\n  //       .then(data => setdata(data.data))\n\n  //       .catch(error => console.error('Error fetching users:', error));\n  //   }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Current Sensor Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sensor-cards\",\n        children: sensorData.map(sensor => /*#__PURE__*/_jsxDEV(SensorCard, {\n          title: sensor.type,\n          value: sensor.value,\n          onClick: () => handleCardClick(sensor.type)\n        }, sensor.type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), selectedSensor && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [selectedSensor, \" Data Over Time\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SensorChart, {\n          data: chartData,\n          label: selectedSensor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(DashBoard, \"p/McZ6AaoCJ7ZcgE83RXmqI9xis=\", false, function () {\n  return [useLocation];\n});\n_c = DashBoard;\nexport default DashBoard;\nvar _c;\n$RefreshReg$(_c, \"DashBoard\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","SensorChart","SensorCard","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","DashBoard","_s","location","data","setdata","sensorData","setSensorData","selectedSensor","setSelectedSensor","chartData","setChartData","console","log","handleCardClick","sensorType","response","get","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","sensor","title","type","value","onClick","label","_c","$RefreshReg$"],"sources":["/Volumes/data/Projects/MERN/client/src/Pages/DashBoard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport SensorChart from '../components/SensorChart'\nimport SensorCard from '../components/SensorCard'\nimport axios from 'axios'\n\nfunction DashBoard() {\n    const location=useLocation()\n    const [data,setdata]=useState([])\n    const [sensorData, setSensorData] = useState([]);\n    const [selectedSensor, setSelectedSensor] = useState(null);\n    const [chartData, setChartData] = useState([]);\n    console.log(sensorData);\n\n  //   useEffect(() => {\n  //     const fetchData = async () => {\n  //         try {\n  //             const response = await axios.get('http://localhost:5000/api/v1/sensors/simulate');\n  //             setSensorData(response.data);\n  //         } catch (error) {\n  //             console.error('Error fetching sensor data:', error);\n  //         }\n  //     };\n\n  //     fetchData();\n  // }, []);\n\n\n  const handleCardClick = async (sensorType) => {\n    setSelectedSensor(sensorType);\n    try {\n        const response = await axios.get(`http://localhost:5000/api/sensor-data/${sensorType}`);\n        setChartData(response.data);\n    } catch (error) {\n        console.error(`Error fetching data for ${sensorType}:`, error);\n    }\n};\n\n    // useEffect(() => {\n    //     fetch('http://localhost:5000/api/v1/sensors/simulate')\n    //       .then(response => response.json())\n    //       .then(data => setdata(data.data))\n            \n    //       .catch(error => console.error('Error fetching users:', error));\n    //   }, []);\n  return (\n    <>\n        {/* <div className=\"cards-container\">\n      \n        \n        <div  className=\"card\">\n          <h3>pH: {data.pH}</h3>\n          <p>TSS: {data.TSS}</p>\n          <p>TDS: {data.TDS}</p>\n          <p>BOD: {data.BOD}</p>\n          <p>COD: {data.COD}</p>\n          <p>Chloride: {data.chloride}</p>\n        </div>\n     \n    </div> */}\n    <div className=\"app\">\n            <h1>Current Sensor Data</h1>\n            <div className=\"sensor-cards\">\n                {sensorData.map((sensor) => (\n                    <SensorCard\n                        key={sensor.type}\n                        title={sensor.type}\n                        value={sensor.value}\n                        onClick={() => handleCardClick(sensor.type)}\n                    />\n                ))}\n            </div>\n            {selectedSensor && (\n                <div className=\"chart-container\">\n                    <h2>{selectedSensor} Data Over Time</h2>\n                    <SensorChart data={chartData} label={selectedSensor} />\n                </div>\n            )}\n        </div>\n\n    </>\n  )\n}\n\nexport default DashBoard\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}